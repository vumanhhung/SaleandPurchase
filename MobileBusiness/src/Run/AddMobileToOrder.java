/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Run;

import GetConnect.MyConnect;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author monki
 */
public class AddMobileToOrder extends javax.swing.JFrame {
    private String itemID;
    DefaultTableModel itemModel;
    /**
     * Creates new form AddMobileToOrder
     */
    public AddMobileToOrder() {
        initComponents();
        itemModel =  (DefaultTableModel) tbMobi.getModel();
        loadData();
    }
    
    public void loadData(){
        itemModel.setRowCount(0);
        try {
            Connection conn = MyConnect.getConnection();
            CallableStatement callSt = conn.prepareCall("{call getAllItems()}");
            //PreparedStatement ps = conn.prepareStatement("select * from Items");
            ResultSet rs = callSt.executeQuery();
            while (rs.next()) {
                String itemID = rs.getString("mobiID");
                String mobiName = rs.getString("mobiName");
                String price = rs.getString("price");
                Object[] row = {itemID, mobiName, price + " $"+ " year"};
                itemModel.addRow(row);
            }
            tbMobi.setModel(itemModel);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        tblMobi = new javax.swing.JScrollPane();
        tbMobi = new javax.swing.JTable();
        btnAddToOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Add Mobile To Order");

        btnSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        tbMobi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Mobile Name", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbMobi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMobiMouseClicked(evt);
            }
        });
        tblMobi.setViewportView(tbMobi);
        if (tbMobi.getColumnModel().getColumnCount() > 0) {
            tbMobi.getColumnModel().getColumn(0).setResizable(false);
            tbMobi.getColumnModel().getColumn(1).setResizable(false);
            tbMobi.getColumnModel().getColumn(2).setResizable(false);
        }

        btnAddToOrder.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddToOrder.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Image/done.png"))); // NOI18N
        btnAddToOrder.setText("Add to Order");
        btnAddToOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(btnSearch)
                        .addGap(34, 34, 34)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tblMobi, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(159, 159, 159)
                        .addComponent(btnAddToOrder)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(tblMobi, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAddToOrder)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String searchText = txtSearch.getText();
        itemModel.setRowCount(0);
        try {
            Connection conn = MyConnect.getConnection();
            CallableStatement callSt = conn.prepareCall("{call searchItems(?)}");
//            PreparedStatement ps = conn.prepareStatement("select * from Customer where CustomerName like '%?%'"); 
            callSt.setString(1, searchText);
            ResultSet rs = callSt.executeQuery();
            while (rs.next()) {
                String itemID = rs.getString("mobiID");
                String mobiName = rs.getString("mobiName");
                String price = rs.getString("price");
                Object[] row = {itemID, mobiName, price};
                itemModel.addRow(row);
            }
            tbMobi.setModel(itemModel);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnAddToOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToOrderActionPerformed
        boolean check = false;
        try {
            if (itemID == null) {
                JOptionPane.showMessageDialog(null, "Select an item to add to order");
            } else {
                Connection conn = MyConnect.getConnection();
                PreparedStatement ps = conn.prepareStatement("select * from Items where mobiID = ?");
                ps.setString(1, itemID);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    int id = rs.getInt("mobiID");
                    String mobiName = rs.getString("mobiName");
                    int price = rs.getInt("price");
                    int quantity = 1;
                    DefaultTableModel model = (DefaultTableModel) CreateOrder.tbOrderItemList.getModel();

                    int numberOfRows = model.getRowCount();
                    if (numberOfRows != 0) {
                        for (int row = 0; row < numberOfRows; row++) {
                            int mobiID = Integer.valueOf(model.getValueAt(row, 0).toString());
                            if (mobiID == id) {
                                int getQuantity = Integer.valueOf(model.getValueAt(row, 2).toString());
                                int getTotalPrice = Integer.valueOf(CreateOrder.txtTotalPrice.getText());
                                int newTotalPrice = getTotalPrice + price;
                                CreateOrder.txtTotalPrice.setText(String.valueOf(newTotalPrice));
                                int newQuantity = getQuantity + 1;
                                int newPrice = price * newQuantity;
 
                                model.setValueAt(newQuantity, row, 2);
                                model.setValueAt(newPrice, row, 4);
                                check = true;
                                break;
                            }
                        }
                        if (check == false) {
                            Object[] rowAdd = {id, mobiName, quantity, price, price};
                            model.insertRow(0, rowAdd);
                            int totalPriceBeforeAdd = Integer.valueOf(CreateOrder.txtTotalPrice.getText());
                            String totalPriceAfterAdd = String.valueOf(totalPriceBeforeAdd + price);
                            CreateOrder.txtTotalPrice.setText(totalPriceAfterAdd);
                        }
                    } else {
                        Object[] rowAdd = {id, mobiName, quantity, price, price};
                        model.insertRow(0, rowAdd);
                        int totalPriceBeforeAdd = Integer.valueOf(CreateOrder.txtTotalPrice.getText());
                        String totalPriceAfterAdd = String.valueOf(totalPriceBeforeAdd + price);
                        CreateOrder.txtTotalPrice.setText(totalPriceAfterAdd);
                    }

                    this.dispose();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnAddToOrderActionPerformed

    private void tbMobiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMobiMouseClicked
        int index = tbMobi.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) tbMobi.getModel();
        itemID = model.getValueAt(index, 0).toString();
    }//GEN-LAST:event_tbMobiMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddMobileToOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddMobileToOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddMobileToOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddMobileToOrder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddMobileToOrder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToOrder;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTable tbMobi;
    private javax.swing.JScrollPane tblMobi;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
